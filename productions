Program ->
Function Program | epsilon



Function ->
function identifier ;
  beginparams Dec-Loop endparams
  beginlocals Dec-Loop endlocals
  beginbody Statement ; Statment-Loop endbody

Dec-Loop ->
Declaraion ; Dec-Loop | espilon

Statement-Loop ->
Statement ; Statement-Loop'

Statement-Loop' ->
Statement ; Statement-Loop' | epsilon



Declaration ->
identifier Identifier-Loop : Declaration' integer

Declaration' ->
array [ number ] of | epsilon

Identifier-Loop ->
, identifier Identifier-Loop | epsilon



Statement ->
Assignment | If-Statement | While-Loop | Do-While | read Var-Loop |
  write Var-Loop | continue | return Expression


Assignment->
Var := Expression


If-Statement ->
if Bool-Expr then Statement-Loop Opt-Else endif

Opt-Else ->
else Statement-Loop | epsilon


While-Loop ->
while Bool-Expr beginloop Statement-Loop endloop


Do-While ->
do beginloop Statement-Loop endloop while Bool-Expr


Var-Loop ->
Var Var-Loop'

Var-Loop' ->
, Var Var-Loop' | epsilon



Bool-Expr ->
Relation-And-Expr Bool-Expr'

Bool-Expr' ->
or Relation-And-Expr Bool-Expr' | epsilon



Relation-And-Expr ->
Relation-Expr Relation-And-Expr'

Relation-And-Expr' ->
and Relation-Expr Relation-And-Expr' | epsilon



Relation-Expr ->
Opt-Not Relation-Expr'

Relation-Expr' ->
Expression Comp Expression | true | false | ( Bool-Expr )


Opt-Not ->
not | epsilon



Comp ->
== | <> | < | > | <= | >=



Expression ->
Multiplicative-Expr Expression'

Expression' ->
PM-OP Multiplicative-Expr Expression' | epsilon

PM-OP ->
+ | -


Multiplicative-Expr ->
Term Term-Loop

Term-Loop ->
Mult-OP term Term-Loop | epsilon

Mult-OP ->
* | / | %



Term ->
Opt-Minus Term' | identifier ( Term'' )

Term' ->
Var | number | ( Expression )

Term''->
Expression-Loop | epsilon

Opt-Minus ->
- | epsilon

Expression-Loop ->
Expression Expression-Loop' | epsilon

Expression-Loop' ->
, Expression Expression-Loop | epsilon



Var ->
identifier Var'

Var' ->
[ Expression ] | epsilon
