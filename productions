Program ->
Function Program | epsilon



Function ->
function identifier ;
  beginparams Dec-Loop endparams
  beginlocals Dec-Loop endlocals
  beginbody Statement ; Statment-Loop endbody

Dec-Loop ->
Declaraion ; Dec-Loop | espilon

Statement-Loop ->
Statement ; Statement-Loop | epsilon



Declaration ->
identifier Identifier-Loop : Declaration'' integer

Identifier-Loop ->
, identifier Identifier-Loop | epsilon

Declaration'' ->
array [ number ] of | epsilon



Statement ->
Var := Expression |
if Bool-Exp then Statement ; Statement' endif |
while Bool-Expr beginloop Statement-Loop endloop |
do beginloop Statement-Loop endloop while Bool-Expr |
read Var-Loop |
write Var-Loop |
continue |
return Expression

Statement' ->
Statement-Loop Statement' | else Statement-Loop | epsilon



Var-Loop ->
Var Var-Loop'

Var-Loop' ->
, Var Var-Loop' | epsilon



Bool-Expr ->
Relation-And-Expr Bool-Expr'

Bool-Expr' ->
or Relation-And-Expr Bool-Expr' | epsilon



Relation-And-Expr ->
Relation-Expr Relation-And-Expr'

Relation-And-Expr' ->
and Relation-Expr Relation-And-Expr' | epsilon



Relation-Expr ->
Opt-Not Relation-Expr'

Relation-Expr' ->
Expression Comp Expression | true | false | ( Bool-Expr )



Opt-Not ->
not | epsilon



Comp ->
== | <> | < | > | <= | >=



Expression ->
Multiplicative-Expr Expression'

Expression' ->
+ Multiplicative-Expr Expression' | - Multiplicative-Expr Expression' | epsilon



Multiplicative-Expr ->
Term Term-Loop

Term-Loop ->
* term Term-Loop | / term Term-Loop | % term Term-Loop | epsilon



Term ->
Opt-Minus Term' | identifier ( Term'' )

Term' ->
Var | number | ( Expression )

Term''->
Expression Expression-Loop | epsilon



Expression-Loop ->
, Term'' | epsilon



Opt-Minus ->
- | epsilon



Var ->
identifier Var'

Var' ->
[ Expression ] | epsilon
